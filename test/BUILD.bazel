load("@bazel_skylib//rules:build_test.bzl", "build_test")

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_archive",
    "ocaml_binary",
    "ocaml_module",
    "ocaml_test",
)

test_suite(
    name = "test",
    tests = [":builds", "clibs"]
)

ocaml_test(
    name = "analysis",
    main = "Analysis",
    cc_deps = {
        "//src/analysis:analysis_c": "static",
        "//src/llvm:llvm_c": "static"
    },
    opts = [
        "-verbose",
        "-ccopt", "-Wl,-v", ## pass verbose to assembler

        "-ccopt",
        "-Lexternal/toolchains_llvm~override~llvm~llvm_toolchain_llvm/lib",
        "-cclib", "-lm",
        "-cclib", "-lz",
        "-cclib", "-lstdc++",
        "-cclib", "-lcurses",
        "-cclib", "-lxml2",
        # "-cclib", "-lLTO",
        # "-cclib", "-lRemarks",
        # "-cclib", "-lclang-cpp",

        "-ccopt", "/opt/homebrew/lib/libzstd.1.5.5.dylib",

        # "-cclib",  "-lLLVMCore.a",
        # "-cclib", "-lLLVMRemarks",
        # "-cclib", "-lLLVMBitstreamReader",
        # "-cclib", "-lLLVMBinaryFormat",
        # "-cclib", "-lLLVMTargetParser",
        # "-cclib", "-lLLVMSupport",
        # "-cclib", "-lLLVMDemangle"
    ],
    toolchains = ["//:repo_paths"]
)

ocaml_module(
    name = "Analysis",
    struct = "analysis.ml",
    deps   = [
        "//src/analysis:Llvm_analysis",
        "//src/llvm:Llvm"
        # ":analysis_c"
    ],
    cc_deps = {"//src/llvm:llvm_c": "static"},
    data = ["@llvm_toolchain_llvm//:include"],
    opts = [
        "-w", "+A-27-70",
    ],
)


build_test(
    name = "builds",
    targets = [
        "//src/all_backends:Llvm_all_backends",
        "//src/analysis:Llvm_analysis",
        # "//src/backends:Llvm_backend", # not yet
        "//src/bitreader:Llvm_bitreader",
        "//src/bitwriter:Llvm_bitwriter",
        "//src/debuginfo:Llvm_debuginfo",
        "//src/executionengine:Llvm_executionengine",
        "//src/irreader:Llvm_irreader",
        "//src/linker:Llvm_linker",
        "//src/llvm:Llvm",
        "//src/target:Llvm_target",
        "//src/transforms/ipo:Llvm_ipo",
        "//src/transforms/passmgr_builder:Llvm_passmgr_builder",
        "//src/transforms/scalar_opts:Llvm_scalar_opts",
        "//src/transforms/utils:Llvm_transform_utils",
        "//src/transforms/vectorize:Llvm_vectorize",
        ]
)

## NB: clib deps of ocaml_module are not built
## until they are needed for linking, so we build
## them separately here.

build_test(
    name = "clibs",
    targets = [
        "//src/all_backends:all_backends_c",
        "//src/analysis:analysis_c",
        "//src/backends:backend_c",
        "//src/bitreader:bitreader_c",
        "//src/bitwriter:bitwriter_c",
        "//src/debuginfo:debuginfo_c",
        "//src/executionengine:executionengine_c",
        "//src/irreader:irreader_c",
        "//src/linker:linker_c",
        "//src/llvm:llvm_c",
        "//src/target:target_c",
        "//src/transforms/ipo:ipo_c",
        "//src/transforms/passmgr_builder:passmgr_builder_c",
        "//src/transforms/scalar_opts:scalar_opts_c",
        "//src/transforms/utils:transform_utils_c",
        "//src/transforms/vectorize:vectorize_c",
        ]
)
