load("@bazel_skylib//rules:build_test.bzl", "build_test")

load(
    "@rules_ocaml//build:rules.bzl",
    "ocaml_archive",
    "ocaml_binary",
    "ocaml_module",
    "ocaml_test",
)

TEST_OPTS = [
    # "-g",
    "-cclib", "-lm",
    "-cclib", "-lz",
    "-cclib", "-lstdc++",
    "-cclib", "-lcurses",
    "-ccopt", "/opt/homebrew/lib/libzstd.1.5.5.dylib",
    # "-verbose",
    # "-ccopt", "-Wl,-v", ## pass verbose to assembler
]

test_suite(
    name = "test",
    tests = [
        ":builds", "clibs",
        ":analysis_test",
        ":bitreader_test",
        ":bitwriter_test",
        ":core_test",
        ":debuginfo_test",
        ":executionengine_test",
        ":ext_exc_test",
        ":ipo_test",
        ":irreader_test",
        ":linker_test",
        ":passmgr_builder_test",
        ":scalar_opts_test",
        ":target_test",
        ":transform_utils_test",
        ":vectorize_test"
    ]
)

###########
ocaml_test(
    name = "analysis_test",
    main = ":Analysis",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Analysis",
    struct = "analysis.ml",
    deps   = ["//llvm/analysis:Analysis"],
    opts = ["-w", "+A-27-70"],
)

###########
ocaml_test(
    name = "bitreader_test",
    args = ["bitcode.bc"],
    main = ":Bitreader",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Bitreader",
    struct = "bitreader.ml",
    deps   = ["//llvm/bitreader:Bitreader",
              "//llvm/bitwriter:Bitwriter"])

###########
ocaml_test(
    name = "bitwriter_test",
    args = ["bitcode.bc"],
    main = ":Bitwriter",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Bitwriter",
    struct = "bitwriter.ml",
    deps   = ["//llvm/bitreader:Bitreader",
              "//llvm/bitwriter:Bitwriter"])

###########
ocaml_test(
    name = "core_test",
    args = ["bitcode.bc"],
    main = ":Core",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Core",
    struct = "core.ml",
    deps   = ["//llvm/analysis:Analysis",
              "//llvm/bitwriter:Bitwriter",
              "//test/Utils:Testsuite"])

###########
ocaml_test(
    name = "debuginfo_test",
    # args = ["bitcode.bc"],
    main = ":Debuginfo",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Debuginfo",
    struct = "debuginfo.ml",
    deps   = ["//llvm/all_backends:All_backends",
              "//llvm/target:Target",
              "//llvm/analysis:Analysis",
              "//llvm/debuginfo:Debuginfo",
              "//test/Utils:Testsuite"]
)

###########
ocaml_test(
    name = "executionengine_test",
    # args = ["bitcode.bc"],
    main = ":Executionengine",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Executionengine",
    struct = "executionengine.ml",
    deps   = [
        "//llvm/llvm:Llvm",
        "//llvm/executionengine:Executionengine",
        # "//llvm/all_backends:All_backends",
              "//llvm/target:Target",
              "//llvm/analysis:Analysis",
              "//llvm/debuginfo:Debuginfo",
              "//test/Utils:Testsuite"
    ]
)

###########
ocaml_test(
    name = "ext_exc_test",
    main = ":Ext_exc",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Ext_exc",
    struct = "ext_exc.ml",
    deps   = [
        "//llvm/llvm:Llvm",
        "//llvm/bitreader:Bitreader",
        "//llvm/executionengine:Executionengine",
    ]
)

###########
ocaml_test(
    name = "ipo_test",
    main = ":Ipo",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Ipo",
    struct = "ipo.ml",
    deps   = [
        "//llvm/llvm:Llvm",
        "//llvm/transforms/ipo:Ipo",
        "//llvm/transforms/passmgr_builder:Passmgr_builder",
        # "//llvm/bitreader:Bitreader",
        # "//llvm/executionengine:Executionengine",
    ]
)


###########
ocaml_test(
    name = "irreader_test",
    main = ":Irreader",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Irreader",
    struct = "irreader.ml",
    deps   = ["//llvm/llvm:Llvm",
              "//llvm/irreader:Irreader"])

###########
ocaml_test(
    name = "linker_test",
    main = ":Linker",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Linker",
    struct = "linker.ml",
    deps   = ["//llvm/llvm:Llvm",
              "//llvm/linker:Linker"])

###########
ocaml_test(
    name = "passmgr_builder_test",
    args = ["bitcode.bc"],
    main = ":Passmgr_builder",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Passmgr_builder",
    struct = "passmgr_builder.ml",
    deps   = [
        "//llvm/transforms/passmgr_builder:Passmgr_builder"
    ]
)

###########
ocaml_test(
    name = "scalar_opts_test",
    args = ["bitcode.bc"],
    main = ":Scalar_opts",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Scalar_opts",
    struct = "scalar_opts.ml",
    deps   = [
        "//llvm/transforms/passmgr_builder:Passmgr_builder",
        "//llvm/transforms/scalar_opts:Scalar_opts"
    ]
)

###########
ocaml_test(
    name = "target_test",
    args = ["bitcode.bc"],
    main = ":Target",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Target",
    struct = "target.ml",
    deps   = [
        "//llvm/transforms/passmgr_builder:Passmgr_builder",
        "//llvm/all_backends:All_backends",
        "//llvm/target:Target"
    ]
)

###########
ocaml_test(
    name = "transform_utils_test",
    args = ["bitcode.bc"],
    main = ":Transform_utils",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Transform_utils",
    struct = "transform_utils.ml",
    deps   = [
        # "//llvm/transforms/passmgr_builder:Passmgr_builder",
        # "//llvm/all_backends:Llvm_all_backends",
        "//llvm/transforms/utils:Transform_utils"
    ]
)

###########
ocaml_test(
    name = "vectorize_test",
    args = ["bitcode.bc"],
    main = ":Vectorize",
    opts = TEST_OPTS,
    toolchains = ["//:repo_paths"],
    timeout = "short"
)

ocaml_module(
    name = "Vectorize",
    struct = "vectorize.ml",
    deps   = [
        "//llvm/transforms/passmgr_builder:Passmgr_builder",
        # "//llvm/all_backends:Llvm_all_backends",
        "//llvm/transforms/vectorize:Vectorize"
    ]
)

################################
build_test(
    name = "builds",
    targets = [
        "//llvm/all_backends:All_backends",
        "//llvm/analysis:Analysis",
        # "//llvm/backends:Backend", # not yet
        "//llvm/bitreader:Bitreader",
        "//llvm/bitwriter:Bitwriter",
        "//llvm/debuginfo:Debuginfo",
        "//llvm/executionengine:Executionengine",
        "//llvm/irreader:Irreader",
        "//llvm/linker:Linker",
        "//llvm/llvm:Llvm",
        "//llvm/target:Target",
        "//llvm/transforms/ipo:Ipo",
        "//llvm/transforms/passmgr_builder:Passmgr_builder",
        "//llvm/transforms/scalar_opts:Scalar_opts",
        "//llvm/transforms/utils:Transform_utils",
        "//llvm/transforms/vectorize:Vectorize",
        ]
)

## NB: clib deps of ocaml_module are not built
## until they are needed for linking, so we build
## them separately here.

build_test(
    name = "clibs",
    targets = [
        "//llvm/all_backends:all_backends_c",
        "//llvm/analysis:analysis_c",
        "//llvm/backends:backend_c",
        "//llvm/bitreader:bitreader_c",
        "//llvm/bitwriter:bitwriter_c",
        "//llvm/debuginfo:debuginfo_c",
        "//llvm/executionengine:executionengine_c",
        "//llvm/irreader:irreader_c",
        "//llvm/linker:linker_c",
        "//llvm/llvm:llvm_c",
        "//llvm/target:target_c",
        "//llvm/transforms/ipo:ipo_c",
        "//llvm/transforms/passmgr_builder:passmgr_builder_c",
        "//llvm/transforms/scalar_opts:scalar_opts_c",
        "//llvm/transforms/utils:transform_utils_c",
        "//llvm/transforms/vectorize:vectorize_c",
        ]
)
